
import { GoogleGenAI } from "@google/genai";

// Ensure the API key is available. In a real-world scenario,
// this would be managed through a secure process and not hardcoded.
// For this example, we assume `process.env.API_KEY` is set in the environment.
const apiKey = process.env.API_KEY;
if (!apiKey) {
    throw new Error("API_KEY is not defined in environment variables.");
}

const ai = new GoogleGenAI({ apiKey });

/**
 * Generates a portfolio project idea using Gemini based on the provided CV.
 * @param cvText The user's CV as a string.
 * @returns A string containing the generated project idea in Markdown format.
 */
export const generateProjectIdea = async (cvText: string): Promise<string> => {
  const model = "gemini-2.5-flash";

  const prompt = `
Tu es un expert en conception de projets web modernes et un recruteur technique chevronn√©.
Un d√©veloppeur web a fourni son CV. Ta mission est de lui proposer un projet de portfolio concret, pertinent et moderne √† r√©aliser avec Next.js.

Le projet doit imp√©rativement :
- Mettre en valeur ses comp√©tences cl√©s (front-end, back-end, base de donn√©es, SIG, DevOps, etc.).
- √ätre r√©alisable par une personne en 2 √† 4 semaines.
- Utiliser Next.js, TypeScript et Tailwind CSS comme base.
- Avoir une UI/UX professionnelle, moderne et responsive.
- √ätre suffisamment impressionnant pour attirer l'attention des recruteurs pour des postes full-stack ou sur des syst√®mes d'information avanc√©s.
- Cibler une probl√©matique r√©elle et proposer une solution √©l√©gante.

Analyse le CV ci-dessous et g√©n√®re une proposition de projet d√©taill√©e.
Structure ta r√©ponse EXACTEMENT comme suit, en utilisant Markdown pour la mise en forme. N'ajoute aucune introduction ou conclusion en dehors de cette structure.

### üí° Titre du Projet
[Un titre clair et accrocheur pour le projet]

### üìù R√©sum√© du Projet
**Probl√©matique :** [D√©cris le probl√®me que le projet r√©sout en 1-2 phrases.]
**Solution Apport√©e :** [D√©cris la solution propos√©e par l'application en 1-2 phrases.]
**Cas d‚ÄôUsage :** [Donne un exemple concret d'utilisation.]

### ‚ú® Fonctionnalit√©s Principales
- [Fonctionnalit√© cl√© 1]
- [Fonctionnalit√© cl√© 2]
- [Fonctionnalit√© cl√© 3]
- [Fonctionnalit√© cl√© 4]
- [Fonctionnalit√© cl√© 5]

### üõ†Ô∏è Technologies Recommand√©es
- **Framework Principal :** Next.js (App Router)
- **Langage :** TypeScript
- **Base de Donn√©es :** [Sugg√®re une BDD pertinente, ex: PostgreSQL avec PostGIS si SIG]
- **ORM :** Prisma
- **Styling :** Tailwind CSS
- **Authentification :** [Sugg√®re une solution, ex: NextAuth.js]
- **D√©ploiement :** Vercel
- **Cartographie (si pertinent) :** [Sugg√®re une lib, ex: Mapbox GL JS, Leaflet]

### üóìÔ∏è Plan de D√©veloppement (4 semaines)
- **Semaine 1 :** [T√¢ches pour la semaine 1 : Setup, Mod√©lisation, UI de base]
- **Semaine 2 :** [T√¢ches pour la semaine 2 : Fonctionnalit√©s c≈ìur]
- **Semaine 3 :** [T√¢ches pour la semaine 3 : Fonctionnalit√©s avanc√©es, authentification]
- **Semaine 4 :** [T√¢ches pour la semaine 4 : Tests, Polissage UI/UX, D√©ploiement, README]

### üöÄ Fonctionnalit√©s Bonus
- [Id√©e de fonctionnalit√© avanc√©e 1 pour impressionner]
- [Id√©e de fonctionnalit√© avanc√©e 2 pour aller plus loin]

---
CV DE L'UTILISATEUR :
\`\`\`
${cvText}
\`\`\`
`;

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: prompt,
    });
    return response.text;
  } catch (error) {
    console.error("Error generating content from Gemini:", error);
    // In a real app, you might want to throw a more specific error
    throw new Error("Failed to generate project idea from Gemini API.");
  }
};
